"""
Database backup utility before reset operations.
"""

import shutil
import os
from datetime import datetime
from database import DatabaseManager

def create_backup():
    """Create a backup of the current database."""
    
    db_path = os.path.join('data', 'results.db')
    
    if not os.path.exists(db_path):
        print("‚ùå Adatb√°zis f√°jl nem tal√°lhat√≥!")
        return None
    
    # Backup f√°jln√©v timestamp-pel
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = os.path.join('data', f'results_backup_{timestamp}.db')
    
    try:
        shutil.copy2(db_path, backup_path)
        print(f"‚úÖ Backup k√©sz√≠tve: {backup_path}")
        
        # Stat info
        size_mb = os.path.getsize(backup_path) / 1024 / 1024
        print(f"   M√©ret: {size_mb:.2f} MB")
        
        return backup_path
        
    except Exception as e:
        print(f"‚ùå Backup hiba: {e}")
        return None

def restore_backup(backup_path: str):
    """Restore database from backup."""
    
    if not os.path.exists(backup_path):
        print(f"‚ùå Backup f√°jl nem tal√°lhat√≥: {backup_path}")
        return False
    
    db_path = os.path.join('data', 'results.db')
    
    response = input(f"Vissza√°ll√≠tod a backup-ot? Ez fel√ºl√≠rja a jelenlegi adatb√°zist! (igen/nem): ")
    
    if response.lower() in ['igen', 'yes', 'y']:
        try:
            shutil.copy2(backup_path, db_path)
            print(f"‚úÖ Adatb√°zis vissza√°ll√≠tva a backup-b√≥l!")
            return True
        except Exception as e:
            print(f"‚ùå Vissza√°ll√≠t√°si hiba: {e}")
            return False
    else:
        print("‚ùå Vissza√°ll√≠t√°s megszak√≠tva")
        return False

def list_backups():
    """List available backup files."""
    
    data_dir = 'data'
    backups = [f for f in os.listdir(data_dir) if f.startswith('results_backup_') and f.endswith('.db')]
    
    if not backups:
        print("Nincsenek backup f√°jlok.")
        return []
    
    print("El√©rhet≈ë backup f√°jlok:")
    print("-" * 40)
    
    for backup in sorted(backups, reverse=True):
        backup_path = os.path.join(data_dir, backup)
        size_mb = os.path.getsize(backup_path) / 1024 / 1024
        mtime = datetime.fromtimestamp(os.path.getmtime(backup_path))
        
        print(f"{backup}")
        print(f"  L√©trehozva: {mtime.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"  M√©ret: {size_mb:.2f} MB")
        print()
    
    return backups

def safe_reset_workflow():
    """Safe workflow for resetting tasks with backup."""
    
    print("üîí BIZTONS√ÅGOS RESET FOLYAMAT")
    print("=" * 40)
    
    # 1. Backup k√©sz√≠t√©se
    print("1. Backup k√©sz√≠t√©se...")
    backup_path = create_backup()
    
    if not backup_path:
        print("‚ùå Backup sikertelen, reset megszak√≠tva!")
        return
    
    # 2. Reset v√©grehajt√°sa
    print("\n2. Reset opci√≥k:")
    print("a) Teljes adatb√°zis reset")
    print("b) Csak tasks reset") 
    print("c) Szelekt√≠v task t√∂rl√©s")
    print("d) M√©gse")
    
    choice = input("V√°laszt√°s (a-d): ").lower()
    
    if choice == 'a':
        response = input("Teljes reset - t√∂rl√∂d az EG√âSZ adatb√°zist? (igen/nem): ")
        if response.lower() in ['igen', 'yes', 'y']:
            os.remove('data/results.db')
            os.system('python database.py')
            print("‚úÖ Teljes reset k√©sz!")
            
    elif choice == 'b':
        print("Tasks reset futtat√°sa...")
        os.system('python reset_tasks.py')
        
    elif choice == 'c':
        print("Szelekt√≠v t√∂rl√©s...")
        os.system('python manage_tasks.py')
        
    elif choice == 'd':
        print("‚ùå Reset megszak√≠tva")
        
    else:
        print("‚ùå √ârv√©nytelen v√°laszt√°s!")
    
    print(f"\nüí° Ha baj van, vissza√°ll√≠thatod: python restore_backup.py {backup_path}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == 'backup':
            create_backup()
        elif sys.argv[1] == 'list':
            list_backups()
        elif sys.argv[1] == 'restore':
            if len(sys.argv) > 2:
                restore_backup(sys.argv[2])
            else:
                backups = list_backups()
                if backups:
                    backup_name = input("Melyik backup-ot √°ll√≠tsam vissza? ")
                    restore_backup(os.path.join('data', backup_name))
    else:
        safe_reset_workflow()